openapi: 3.0.3
info:
  title: Furtmates-Store - OpenAPI 3.0
  description: API for e-commerce platform called "Furtmates-Store" with user management, product management, and payment integration
  version: 1.0.0
servers:
  - url: https://furtmates.devandre.com/v1
    description: Production server
  - url: https://staging-api-furtmates.devandre.com/v1
    description: Staging server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [MANAGER, CLIENT]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
          minimum: 0
        category:
          type: string
        images:
          type: array
          items:
            type: string
            format: uri
        isActive:
          type: boolean
          default: true
        likes:
          type: integer
          default: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
              price:
                type: number
        status:
          type: string
          enum: [PENDING, PAID, CANCELLED]
        total:
          type: number
        stripePaymentIntentId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

tags:
  - name: Authentication
    description: Everything about users and authentication
  - name: Products
    description: Depends on Manager or Client role provided in the JWT

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: You can choose between Manager or Client in the user registration request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - role
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: [MANAGER, CLIENT]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Sign in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /auth/signout:
    post:
      tags:
        - Authentication
      summary: Sign out user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully signed out
        '401':
          description: Unauthorized

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset email sent
        '404':
          description: User not found

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password successfully reset
        '400':
          description: Invalid token or password

  /products:
    get:
      tags:
        - Products
      summary: ROLE-CLIENT- List products with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: category
          schema:
            type: string
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      current:
                        type: integer
                      limit:
                        type: integer

    post:
      tags:
        - Products
      summary: ROLE-MANAGER- Create a new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - stock
                - category
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                category:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden - Managers only

  /products/{productId}:
    get:
      tags:
        - Products
      summary: ROLE-CLIENT- Get product details
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      tags:
        - Products
      summary: ROLE-MANAGER- Update product
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                category:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Product updated
        '403':
          description: Forbidden - Managers only
        '404':
          description: Product not found

    delete:
      tags:
        - Products
      summary: ROLE-MANAGER- Delete product
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted
        '403':
          description: Forbidden - Managers only
        '404':
          description: Product not found

  /products/{productId}/status:
    patch:
      tags:
        - Products
      summary: ROLE-MANAGER- Enable/disable product
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isActive
              properties:
                isActive:
                  type: boolean
      responses:
        '200':
          description: Product status updated
        '403':
          description: Forbidden - Managers only
        '404':
          description: Product not found

  /products/{productId}/like:
    post:
      tags:
        - Products
      summary: ROLE-MANAGER- Like a product
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product liked
        '404':
          description: Product not found

  /cart:
    get:
      tags:
        - Cart
      summary: ROLE-CLIENT- Get user's cart
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    post:
      tags:
        - Cart
      summary: ROLE-CLIENT- Add product to cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Product added to cart
        '404':
          description: Product not found

  /orders:
    get:
      tags:
        - Orders
      summary: ROLE-MANAGER- List orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      tags:
        - Orders
      summary: ROLE-CLIENT- Create order from cart
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /payment/create-intent:
    post:
      tags:
        - Payment
      summary: Create Stripe payment intent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - orderId
              properties:
                orderId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Payment intent created
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientSecret:
                    type: string

  /webhook/stripe:
    post:
      tags:
        - Payment
      summary: Handle Stripe webhook events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed

security:
  - BearerAuth: []
